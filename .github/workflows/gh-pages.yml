name: Deploy GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'helm/**'
      - '.github/workflows/gh-pages.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Package Helm Chart
        run: |
          mkdir -p .cr-release-packages
          helm package helm/ --destination .cr-release-packages/

      - name: Generate Helm Repository Index
        run: |
          helm repo index .cr-release-packages/ --url https://kymo-mcp.github.io/mcpcan-deploy/

      - name: Prepare GitHub Pages Content
        run: |
          # Create the pages directory structure
          mkdir -p _site
          
          # Copy the Helm repository index
          cp .cr-release-packages/index.yaml _site/
          
          # Copy packaged charts
          cp .cr-release-packages/*.tgz _site/ 2>/dev/null || true
          
          # Convert Helm README to HTML for the main page
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>MCPCan Helm Charts</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
              <style>
                  .markdown-body {
                      box-sizing: border-box;
                      min-width: 200px;
                      max-width: 980px;
                      margin: 0 auto;
                      padding: 45px;
                  }
                  @media (max-width: 767px) {
                      .markdown-body {
                          padding: 15px;
                      }
                  }
                  .header-nav {
                      background: #f6f8fa;
                      border-bottom: 1px solid #d0d7de;
                      padding: 16px 0;
                      margin: -45px -45px 45px -45px;
                  }
                  .header-nav .container {
                      max-width: 980px;
                      margin: 0 auto;
                      padding: 0 45px;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }
                  .header-nav h1 {
                      margin: 0;
                      font-size: 24px;
                      color: #24292f;
                  }
                  .nav-links a {
                      color: #0969da;
                      text-decoration: none;
                      margin-left: 16px;
                  }
                  .nav-links a:hover {
                      text-decoration: underline;
                  }
                  .chart-info {
                      background: #f6f8fa;
                      border: 1px solid #d0d7de;
                      border-radius: 6px;
                      padding: 16px;
                      margin: 16px 0;
                  }
                  .chart-info h3 {
                      margin-top: 0;
                      color: #24292f;
                  }
                  .install-command {
                      background: #f6f8fa;
                      border: 1px solid #d0d7de;
                      border-radius: 6px;
                      padding: 16px;
                      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
                      font-size: 14px;
                      overflow-x: auto;
                  }
              </style>
          </head>
          <body>
              <div class="header-nav">
                  <div class="container">
                      <h1>MCPCan Helm Charts</h1>
                      <div class="nav-links">
                          <a href="https://github.com/Kymo-MCP/mcpcan-deploy">GitHub</a>
                          <a href="https://github.com/Kymo-MCP/mcpcan">MCPCan Project</a>
                          <a href="index.yaml">Repository Index</a>
                      </div>
                  </div>
              </div>
              <div class="markdown-body">
          EOF
          
          # Convert markdown to HTML content (simplified conversion)
          # In a real scenario, you might want to use a proper markdown processor
          python3 << 'PYTHON_EOF'
          import re
          import html
          
          # Read the Helm README
          with open('helm/README.md', 'r', encoding='utf-8') as f:
              content = f.read()
          
          # Simple markdown to HTML conversion
          # Convert headers
          content = re.sub(r'^# (.+)$', r'<h1>\1</h1>', content, flags=re.MULTILINE)
          content = re.sub(r'^## (.+)$', r'<h2>\1</h2>', content, flags=re.MULTILINE)
          content = re.sub(r'^### (.+)$', r'<h3>\1</h3>', content, flags=re.MULTILINE)
          content = re.sub(r'^#### (.+)$', r'<h4>\1</h4>', content, flags=re.MULTILINE)
          
          # Convert code blocks
          content = re.sub(r'```(\w+)?\n(.*?)\n```', r'<pre><code>\2</code></pre>', content, flags=re.DOTALL)
          content = re.sub(r'`([^`]+)`', r'<code>\1</code>', content)
          
          # Convert links
          content = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', content)
          
          # Convert bold and italic
          content = re.sub(r'\*\*([^*]+)\*\*', r'<strong>\1</strong>', content)
          content = re.sub(r'\*([^*]+)\*', r'<em>\1</em>', content)
          
          # Convert tables (basic)
          lines = content.split('\n')
          in_table = False
          result_lines = []
          
          for i, line in enumerate(lines):
              if '|' in line and line.strip().startswith('|') and line.strip().endswith('|'):
                  if not in_table:
                      result_lines.append('<table>')
                      in_table = True
                  
                  # Check if this is a header separator line
                  if re.match(r'^\|[\s\-\|:]+\|$', line.strip()):
                      continue
                  
                  # Check if previous line was a header (first table row)
                  is_header = (i > 0 and '|' in lines[i-1] and 
                              i+1 < len(lines) and re.match(r'^\|[\s\-\|:]+\|$', lines[i+1].strip()))
                  
                  cells = [cell.strip() for cell in line.strip().split('|')[1:-1]]
                  tag = 'th' if is_header else 'td'
                  
                  if is_header:
                      result_lines.append('<thead><tr>')
                  elif i > 0 and re.match(r'^\|[\s\-\|:]+\|$', lines[i-1].strip()):
                      result_lines.append('</thead><tbody><tr>')
                  else:
                      result_lines.append('<tr>')
                  
                  for cell in cells:
                      result_lines.append(f'<{tag}>{cell}</{tag}>')
                  
                  result_lines.append('</tr>')
              else:
                  if in_table:
                      result_lines.append('</tbody></table>')
                      in_table = False
                  result_lines.append(line)
          
          if in_table:
              result_lines.append('</tbody></table>')
          
          content = '\n'.join(result_lines)
          
          # Convert line breaks to paragraphs
          paragraphs = content.split('\n\n')
          content = '\n'.join(f'<p>{p.replace(chr(10), "<br>")}</p>' if p.strip() and not p.strip().startswith('<') else p for p in paragraphs)
          
          # Write to HTML file
          with open('_site/index.html', 'a', encoding='utf-8') as f:
              f.write(content)
          PYTHON_EOF
          
          # Close HTML tags
          cat >> _site/index.html << 'EOF'
                  <div class="chart-info">
                      <h3>ðŸ“¦ Quick Installation</h3>
                      <p>Add this Helm repository and install MCPCan:</p>
                      <div class="install-command">
          # Add the repository<br>
          helm repo add mcpcan https://kymo-mcp.github.io/mcpcan-deploy/<br><br>
          # Update repository<br>
          helm repo update<br><br>
          # Install MCPCan<br>
          helm install mcpcan mcpcan/mcpcan
                      </div>
                  </div>
                  
                  <div class="chart-info">
                      <h3>ðŸ“‹ Available Charts</h3>
                      <ul>
                          <li><strong>mcpcan</strong> - Complete MCPCan platform with all services</li>
                      </ul>
                      <p>View the <a href="index.yaml">repository index</a> for detailed chart information.</p>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4