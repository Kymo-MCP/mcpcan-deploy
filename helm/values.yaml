# Global configuration
global:
  domain: mcp-market.com
  version: v1.0.0
  registry: ccr.ccs.tencentyun.com/itqm-private
  imagePullPolicy: Always
  appSecret: dev-app-secret
  hostStorage:
    rootPath: /data/mcp-box
    staticPath: /data/mcp-box/static
    codePackagePath: /data/mcp-box/code-package
    mysqlPath: /data/mcp-box/mysql
    redisPath: /data/mcp-box/redis
  mountStorage:
    rootPath: /data/mcp-box
    staticPath: /data/mcp-box/static
    codePackagePath: /data/mcp-box/code-package
    mysqlPath: /var/lib/mysql
    redisPath: /data/redis

# Infrastructure configuration
infrastructure:
  mysql:
    enabled: true
    name: mysql
    image:
      repository: mysql
      tag: "8.0"
    service:
      name: mysql-svc
      port: 3306
      type: ClusterIP
    auth:
      rootPassword: dev-root-password
      database: mcp_dev
      username: mcp_user
      password: dev-password
    persistence:
      enabled: false
      size: 100Gi
      storageClass: local-storage
      mountPath: /var/lib/mysql
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  redis:
    enabled: true
    name: redis
    image:
      repository: redis
      tag: "7.0"
    service:
      name: redis-svc
      port: 6379
      type: ClusterIP
    auth:
      password: dev-redis-password
      db: 0
    persistence:
      enabled: false
      size: 50Gi
      storageClass: local-storage
      mountPath: /data/redis
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"

# Services configuration
services:
  web:
    enabled: true
    name: mcp-web
    replicas: 1
    service:
      name: mcp-web-svc
      port: 3000
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /
      pathType: Prefix
    config:
      enabled: false
    persistence:
      enabled: false
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"

  market:
    enabled: true
    name: mcp-market
    replicas: 1
    service:
      name: mcp-market-svc
      port: 8080
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /api/market
      pathType: Prefix
    config:
      enabled: false
    persistence:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  authz:
    enabled: true
    name: mcp-authz
    replicas: 1
    service:
      name: mcp-authz-svc
      port: 8081
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /api/authz
      pathType: Prefix
    config:
      enabled: false
    persistence:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  gateway:
    enabled: true
    name: mcp-gateway
    replicas: 1
    service:
      name: mcp-gateway-svc
      port: 8082
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /api/gateway
      pathType: Prefix
    config:
      enabled: false
    persistence:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  init:
    enabled: true
    name: mcp-init
    replicas: 1
    service:
      name: mcp-init-svc
      port: 8083
      type: ClusterIP
    config:
      enabled: false
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
  tls:
    enabled: false
    secretName: "domain-tls"
    hosts:
      - example.mcp-box.com
    crt: ""
    key: ""

# Nginx Ingress Controller configuration
ingressController:
  enabled: true
  # 是否自动检测其他命名空间中已存在的 Ingress Controller
  autoDetect: true
  # 强制安装，即使检测到其他命名空间中已存在
  forceInstall: false
  namespace: ingress-nginx
  image:
    repository: registry.k8s.io/ingress-nginx/controller
    tag: v1.8.4
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    httpPort: 80
    httpsPort: 443
    httpNodePort: 30080
    httpsNodePort: 30443
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  # 节点选择器
  nodeSelector:
    kubernetes.io/os: linux
  # 容忍度配置
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Equal
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      operator: Equal
      effect: NoSchedule
  # 是否使用主机网络
  hostNetwork: true
  # DNS 策略
  dnsPolicy: ClusterFirstWithHostNet


# Monitoring and observability
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# Security
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    enabled: false