# Global configuration
global:
  # need to set domain or publicIP
  domain: ""
  publicIP: "192.168.1.100"
  version: v1.0.0
  registry: ccr.ccs.tencentyun.com/itqm-private
  imagePullPolicy: Always
  appSecret: dev-app-secret
  hostStorage:
    rootPath: /data/mcp-box
    staticPath: /data/mcp-box/static
    codePackagePath: /data/mcp-box/code-package
    mysqlPath: /data/mcp-box/mysql
    redisPath: /data/mcp-box/redis
  mountStorage:
    rootPath: /data/mcp-box
    staticPath: /data/mcp-box/static
    codePackagePath: /data/mcp-box/code-package
    mysqlPath: /var/lib/mysql
    redisPath: /data/redis

# Infrastructure configuration
infrastructure:
  mysql:
    enabled: true
    auth:
      rootPassword: dev-root-password
      database: mcp_dev
      username: mcp_user
      password: dev-password
    name: mysql
    image:
      repository: mysql
      tag: "8.0.30"
    service:
      name: mysql-svc
      port: 3306
      type: ClusterIP
      enabledNodePort: true
      nodePort: 31306
    hostPath:
      enabled: true
      name: mysql-hostpath
      path: /data/mcp-box/mysql
      type: DirectoryOrCreate
      mountPath: /var/lib/mysql
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  redis:
    enabled: true
    auth:
      password: dev-redis-password
      db: 0
    name: redis
    image:
      repository: redis
      tag: "6-alpine"
    service:
      name: redis-svc
      port: 6379
      type: ClusterIP
      enabledNodePort: true
      nodePort: 31379
    hostPath:
      enabled: true
      name: redis-hostpath
      path: /data/mcp-box/redis
      type: DirectoryOrCreate
      mountPath: /data/redis
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"

# Services configuration
services:
  web:
    enabled: true
    name: mcp-web
    replicas: 1
    service:
      name: mcp-web-svc
      port: 3000
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /
      pathType: Prefix
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"

  market:
    enabled: true
    name: mcp-market
    replicas: 1
    service:
      name: mcp-market-svc
      port: 8080
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /api/market/(.*)
      pathType: Prefix
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /market/$1
    config:
      enabled: false
    persistence:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  authz:
    enabled: true
    name: mcp-authz
    replicas: 1
    service:
      name: mcp-authz-svc
      port: 8081
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /api/authz/(.*)
      pathType: Prefix
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /authz/$1
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  gateway:
    enabled: true
    name: mcp-gateway
    replicas: 1
    service:
      name: mcp-gateway-svc
      port: 8082
      type: ClusterIP
    ingress:
      enabled: true
      host: ""
      path: /mcp-gateway
      pathType: Prefix
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  init:
    enabled: true
    name: mcp-init
    replicas: 1
    service:
      name: mcp-init-svc
      port: 8083
      type: "ClusterIP"
    k8sHostPath:
      enabled: true
      name: k8s-init-hostpath
      path: /etc/rancher/k3s
      type: DirectoryOrCreate
      mountPath: /app/config/kube
      configMapKey: kubernetes-internal.yaml
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "200m"

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
  tls:
    enabled: false
    secretName: "domain-tls"
    crt: ''
    key: ''


# Image Pre-Pull configuration (Simple)
imagePull:
  enabled: false
  importerImage: "alpine:3.18"
  imagesPath: "/opt/mcp-box/images"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  nodeSelector: {}
  tolerations: []

# Monitoring and observability
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# Security
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    enabled: false