{{- if .Values.imagePull.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mcpcan.fullname" . }}-image-import-script
  labels:
    {{- include "mcpcan.labels" . | nindent 4 }}
data:
  import-images.sh: |
    #!/bin/sh
    set -e
    
    echo "=== Starting offline image import process ==="
    
    # Check if images directory exists
    if [ ! -d "/images" ]; then
      echo "Error: /images directory not found"
      exit 1
    fi
    
    # Count available image files
    IMAGE_COUNT=$(find /images -name "*.tar.gz" -o -name "*.tar" | wc -l)
    echo "Found $IMAGE_COUNT image files to import"
    
    if [ "$IMAGE_COUNT" -eq 0 ]; then
      echo "Warning: No image files found in /images directory"
      exit 0
    fi
    
    # Detect container runtime
    if command -v crictl >/dev/null 2>&1 && [ -S /run/containerd/containerd.sock ]; then
      RUNTIME="crictl"
      echo "Using crictl (containerd) for image import"
    elif command -v docker >/dev/null 2>&1 && [ -S /var/run/docker.sock ]; then
      RUNTIME="docker"  
      echo "Using docker for image import"
    else
      echo "Error: No supported container runtime found"
      echo "Checked: crictl (/run/containerd/containerd.sock), docker (/var/run/docker.sock)"
      exit 1
    fi
    
    # Import images
    SUCCESS_COUNT=0
    FAILED_COUNT=0
    
    for image_file in /images/*.tar.gz /images/*.tar; do
      [ -f "$image_file" ] || continue
      
      echo "Processing: $(basename "$image_file")"
      
      if [ "${image_file%.gz}" != "$image_file" ]; then
        # Compressed file - decompress first
        echo "  Decompressing..."
        gunzip -c "$image_file" > /tmp/image.tar
        IMPORT_FILE="/tmp/image.tar"
      else
        IMPORT_FILE="$image_file"
      fi
      
      # Import image
      echo "  Importing..."
      if [ "$RUNTIME" = "crictl" ]; then
        if ctr -n k8s.io images import "$IMPORT_FILE"; then
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          echo "  ✓ Success"
        else
          FAILED_COUNT=$((FAILED_COUNT + 1))
          echo "  ✗ Failed"
        fi
      else
        if docker load -i "$IMPORT_FILE"; then
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          echo "  ✓ Success"
        else
          FAILED_COUNT=$((FAILED_COUNT + 1))
          echo "  ✗ Failed"
        fi
      fi
      
      # Clean up temporary file
      [ -f "/tmp/image.tar" ] && rm -f /tmp/image.tar
    done
    
    echo "=== Import Summary ==="
    echo "Successfully imported: $SUCCESS_COUNT images"
    echo "Failed to import: $FAILED_COUNT images"
    echo "Total processed: $((SUCCESS_COUNT + FAILED_COUNT)) images"
    
    if [ "$FAILED_COUNT" -gt 0 ]; then
      echo "Warning: Some images failed to import, but continuing deployment"
    fi
    
    echo "=== Offline image import completed ==="

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mcpcan.fullname" . }}-image-import
  labels:
    {{- include "mcpcan.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: {{ include "mcpcan.fullname" . }}-image-import
    spec:
      restartPolicy: Never
      containers:
      - name: image-importer
        image: {{ .Values.imagePull.importerImage | default "alpine:3.18" }}
        command: ["/bin/sh", "/scripts/import-images.sh"]
        volumeMounts:
        - name: import-script
          mountPath: /scripts
        - name: images-volume
          mountPath: /images
          readOnly: true
        - name: containerd-sock
          mountPath: /run/containerd/containerd.sock
        - name: docker-sock
          mountPath: /var/run/docker.sock
        {{- if .Values.imagePull.resources }}
        resources:
          {{- toYaml .Values.imagePull.resources | nindent 10 }}
        {{- end }}
      volumes:
      - name: import-script
        configMap:
          name: {{ include "mcpcan.fullname" . }}-image-import-script
          defaultMode: 0755
      - name: images-volume
        hostPath:
          path: {{ .Values.imagePull.imagesPath | default "/opt/mcpcan/images" }}
          type: Directory
      - name: containerd-sock
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      {{- if .Values.imagePull.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.imagePull.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePull.tolerations }}
      tolerations:
        {{- toYaml .Values.imagePull.tolerations | nindent 8 }}
      {{- end }}
{{- end }}